{"searchDocs":[{"title":"Core Applications of Flux Balance Analysis","type":0,"sectionRef":"#","url":"/bachelorthesis/flux-balance-analysis/applications","content":"Core Applications of Flux Balance Analysis","keywords":"","version":"Next"},{"title":"Dynamic Flux Balance Analysis","type":0,"sectionRef":"#","url":"/bachelorthesis/flux-balance-analysis/dynamic_fba","content":"Dynamic Flux Balance Analysis","keywords":"","version":"Next"},{"title":"Project Goals","type":0,"sectionRef":"#","url":"/bachelorthesis/introduction/project_goals","content":"","keywords":"","version":"Next"},{"title":"Making Better Bacteria Growth Models​","type":1,"pageTitle":"Project Goals","url":"/bachelorthesis/introduction/project_goals#making-better-bacteria-growth-models","content":" Goal: Improve the existing models that predict how bacteria behave and grow. Right now, these models don't always account for what happens when bacteria get too crowded, like in overflow metabolism seen in certain types of bacteria like E. coli. We want to make these models more accurate for situations where bacteria are densely packed.  ","version":"Next","tagName":"h2"},{"title":"Tackling the Crowding Issue in Bioreactors​","type":1,"pageTitle":"Project Goals","url":"/bachelorthesis/introduction/project_goals#tackling-the-crowding-issue-in-bioreactors","content":" Problem: When too many bacteria grow close together, they struggle to get the nutrients they need because they run out of room. This affects their growth and the amount of useful stuff they can produce, like medicines or biofuels. Solution: We plan to use advanced calculations to better understand how bacteria take up nutrients when they're crowded. Our approach will look at how the shape and surface area of bacteria affect their ability to get nutrients.  ","version":"Next","tagName":"h2"},{"title":"Our Plan of Action​","type":1,"pageTitle":"Project Goals","url":"/bachelorthesis/introduction/project_goals#our-plan-of-action","content":" Adding New Mathematical Features: We're going to add new mathematical parts to our existing bacteria growth models. This will help us show the relationship between how much nutrients the bacteria get and how they grow. Breaking Down Complex Equations: We'll break down a modified Michealis-Menten equation into smaller parts. This will help us predict how fast bacteria can take up nutrients in a more optimized fashion. Investigating Nutrient Levels in Crowded Situations: We'll look into how much glucose is available to bacteria when they're really packed together. Simulating Crowded Bacteria Conditions: Finally, we'll use our improved models to mimic what happens in a bioreactor when it's full of bacteria, focusing on how this affects glucose uptake and the overall process efficiency.  Our project is all about making bioreactors work better, especially when dealing with the tricky situation of having too many bacteria in one space. We hope our work will lead to better ways of producing useful products from bacteria in a more efficient way. ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/bachelorthesis/introduction","content":"","keywords":"","version":"Next"},{"title":"The Relevance of Bioreactors in Microbial Processes​","type":1,"pageTitle":"Introduction","url":"/bachelorthesis/introduction#the-relevance-of-bioreactors-in-microbial-processes","content":" Bioreactors, specialized vessels for conducting biological reactions, are integral to various industries, especially in biotechnology and pharmaceuticals. Their primary role is to provide a controlled environment for the effective growth and maintenance of microorganisms, facilitating the production of bio-products. Bioreactors are designed to regulate parameters such as temperature, pH, oxygen levels, and nutrient supply, ensuring optimal conditions for microbial activities. The versatility and control offered by bioreactors make them indispensable for applications ranging from waste treatment to the production of pharmaceuticals, biofuels, and other bio-based products.  An Example Bioreactor, Source: Wikimedia Commons  ","version":"Next","tagName":"h2"},{"title":"The Challenge of Bacterial Crowding in Bioreactors​","type":1,"pageTitle":"Introduction","url":"/bachelorthesis/introduction#the-challenge-of-bacterial-crowding-in-bioreactors","content":" A critical issue in the operation of bioreactors is the phenomenon of bacterial crowding. As microorganisms proliferate, they tend to aggregate, leading to high cell densities. This crowding can significantly impede their effectiveness in two primary ways:  Reduced Nutrient Uptake: High cell densities in bioreactors result in reduced surface area relative to the volume occupied by the bacteria. This leads to limited exposure of individual cells to the medium, constraining their ability to uptake essential nutrients effectively. Nutrient uptake is a vital process for microbial growth and product formation, and its limitation can severely impact the overall efficiency of the bioreactor. Impaired Growth and Product Output: Bacterial crowding not only affects the growth rate of the microorganisms but also their productivity. In industrial processes where the goal is to maximize the yield of a specific product, such as a therapeutic protein or a biochemical, the aggregation and resulting limited nutrient access can lead to suboptimal production levels.  ","version":"Next","tagName":"h2"},{"title":"Addressing the Challenge: Estimating Nutrient Uptake Rates​","type":1,"pageTitle":"Introduction","url":"/bachelorthesis/introduction#addressing-the-challenge-estimating-nutrient-uptake-rates","content":" To mitigate the effects of bacterial crowding, it is essential to understand and model the nutrient uptake process accurately. One key approach is the use of the Michaelis-Menten equation, a well-established model in enzyme kinetics. This model describes the rate of enzymatic reactions by relating the reaction rate to the concentration of a substrate (in this case, the nutrient). By applying the Michaelis-Menten framework, we can estimate the rate at which nutrients are absorbed by the cells under varying conditions of crowding and substrate concentration.  However, the Michaelis-Menten equation alone does not account for all the complexities of microbial metabolism in crowded environments. Additional factors, such as the actual surface area of the cells available for nutrient uptake, must also be considered. This includes understanding the changes in cell morphology and the proportion of the cell membrane in contact with the medium, which can significantly influence uptake rates. ","version":"Next","tagName":"h2"},{"title":"Discussion","type":0,"sectionRef":"#","url":"/bachelorthesis/linear-approximation/discussion","content":"Discussion","keywords":"","version":"Next"},{"title":"Principles of FBA","type":0,"sectionRef":"#","url":"/bachelorthesis/flux-balance-analysis/principles","content":"","keywords":"","version":"Next"},{"title":"Basic Concepts and Key Terms​","type":1,"pageTitle":"Principles of FBA","url":"/bachelorthesis/flux-balance-analysis/principles#basic-concepts-and-key-terms","content":" FBA revolves around a few critical concepts:  Metabolic Network: A network representing all the metabolic reactions occurring in a cell.Flux: The rate at which metabolites are processed in a reaction.Steady-State Assumption: The principle that, in a metabolic network, the concentrations of intermediate metabolites remain constant over time.    This diagram represents a simple metabolic network with a substrate, an intermediate, and a product. The arrows labeled &quot;Flux 1&quot; and &quot;Flux 2&quot; demonstrate the flow of metabolites, illustrating the concept of flux in FBA. The steady-state assumption in FBA is implied by the continuous and balanced flow from the substrate through the intermediate to the product, indicating that the concentration of the intermediate remains constant over time.  ","version":"Next","tagName":"h2"},{"title":"Understanding the Role of Stoichiometry​","type":1,"pageTitle":"Principles of FBA","url":"/bachelorthesis/flux-balance-analysis/principles#understanding-the-role-of-stoichiometry","content":" Stoichiometry in FBA refers to the quantitative relationships between reactants and products in metabolic reactions. It is critical in determining the flow of metabolites through the network.  Here are some examples of stoichiometric equations:  Glucose+2 NAD+→2 Pyruvate+2 NADH\\text{Glucose} + 2\\, \\text{NAD}^+ \\rightarrow 2\\, \\text{Pyruvate} + 2\\, \\text{NADH}Glucose+2NAD+→2Pyruvate+2NADH6 CO2+6 H2O→C6H12O6+6 O26\\, \\text{CO}_2 + 6\\, \\text{H}_2\\text{O} \\rightarrow \\text{C}_6\\text{H}_{12}\\text{O}_6 + 6\\, \\text{O}_26CO2​+6H2​O→C6​H12​O6​+6O2​C6H12O6→3 CO2+3 CH3CH2OH\\text{C}_6\\text{H}_{12}\\text{O}_6 \\rightarrow 3\\, \\text{CO}_2 + 3\\, \\text{CH}_3\\text{CH}_2\\text{OH}C6​H12​O6​→3CO2​+3CH3​CH2​OH  It is not different from the equations one were taught in school, with the difference that stoichiometric equations are balanced in mass. You will see that the same mass is going in as an reactant and coming out as a product. ","version":"Next","tagName":"h2"},{"title":"Adaptive Static Segmentation","type":0,"sectionRef":"#","url":"/bachelorthesis/linear-approximation/methods/adaptive_static_segmentation","content":"Adaptive Static Segmentation","keywords":"","version":"Next"},{"title":"Overview and recap of the problem","type":0,"sectionRef":"#","url":"/bachelorthesis/linear-approximation/introduction","content":"Overview and recap of the problem To be able to speed up Flux Balance Analysis (FBA) we need to understand the core principle why it can be fast or slow depending on the circumstances. Static FBA (sFBA) is merely a one-time linear programming problem. The goal is to optimize the overdefined system of linear equations so that it provides a value based on an objective function. This type of computation is generally relatively fast, because the methods for it are known for a long time and have been improved to a point where one can use these easily. If you want to know more about the methods in linear programming and delve deeper into the vocabulary, you can finde more on Gurobis website. Overall, in terms of a computer scientist, the methods have a good time complexity, which makes solving problems with them fast and easy. Dynamic FBA (dFBA) on the other hand brings another dimension into account (liek time) and depending on what is to be achieved, functions have to be used as a constraint which are computationally intensive because of the fact that they are non-linear and therefore cannot be incorporated into a matrix anymore. This means that they have to be evaluated for every step in time which gets computationally very intense for a lot of calculations.","keywords":"","version":"Next"},{"title":"Bayesian Optimisation","type":0,"sectionRef":"#","url":"/bachelorthesis/linear-approximation/methods/bayesian_optimization","content":"Bayesian Optimisation","keywords":"","version":"Next"},{"title":"approximation","type":0,"sectionRef":"#","url":"/bachelorthesis/approximation","content":"","keywords":"","version":"Next"},{"title":"LinearApproximator Objects​","type":1,"pageTitle":"approximation","url":"/bachelorthesis/approximation#linearapproximator-objects","content":" class LinearApproximator()   A class for creating a linear piecewise approximation of a function within a given domain.  Attributes:  start float - The start of the domain on the x-axis.end float - The end of the domain on the x-axis.num_points int - The number of points in the domain.function callable - The function to approximate.function_params dict - Parameters of the function to approximatemax_segments int - The maximum number of line segments for the piecewise approximation.threshold float - The error threshold for the approximation.suppress_warnings bool - If True, suppresses NumPy polynomial fit warnings.piecewise_func list - Stores the slope and intercept of each line segment.segments list - List of tuples representing the start and end points of each segment.  __init__​  def __init__(start: float, end: float, num_points: int, function: Callable, function_params: dict[str, Any] = {}, max_segments: int = 500, threshold: float = 0.01, suppress_warnings: bool = True)   Initializes the LinearApproximator with domain, function, and approximation parameters.  Arguments:  start float - The start of the domain on the x-axis. end float - The end of the domain on the x-axis. num_points int - The number of points to be used for generating the domain within the specified range. function FunctionType or callable - The function to approximate. Can be a predefined function specified by the FunctionType enum from functions.py or a custom callable function. If a FunctionType enum value is provided, the corresponding predefined function is used. If a callable is provided, it is used directly. function_params dict, optional - Parameters to be passed to the function. This should be a dictionary where keys are the names of the parameters and values are their corresponding values. This is especially useful for predefined functions that require specific parameters. Defaults to an empty dictionary. max_segments int, optional - The maximum number of line segments for the piecewise approximation. Defaults to 500. threshold float, optional - The error threshold for the approximation. Defaults to 0.01. suppress_warnings bool, optional - If True, suppresses NumPy polynomial fit warnings. Defaults to True. The initializer first maps the provided function argument to the corresponding function, either from a set of predefined functions or a user-defined function. It then generates a domain of x-values (S) using np.linspace and computes the corresponding y-values (y_base) using the provided function and parameters.  update_piecewise_approximation​  def update_piecewise_approximation(n_segments)   Updates the piecewise linear approximation with a given number of segments.  Arguments:  n_segments int - Number of segments to use in the piecewise approximation.  Returns:  np.ndarray - Array of y-values approximated by the piecewise linear function.  Notes:  This function makes piecewise_func and segments available in the approximator  compute_error​  def compute_error(approx_values)   Computes the error of the piecewise linear approximation.  Arguments:  approx_values np.ndarray - The approximated y-values of the piecewise linear function.  Returns:  float - The calculated error of the approximation.  compute_approximation​  def compute_approximation()   Computes the linear piecewise approximation within the specified error threshold and segment limit.  Arguments:  None  Returns:  None  Example:  approximator = LinearApproximator(S, y_base, max_segments, threshold) approximator.compute_approximation()   This will compute the approximation and update the class attributes accordingly.  Notes:  This method iteratively increases the number of segments until the error threshold is met or the maximum number of segments is reached. It uses a binary search approach to find the optimal number of segments within these constraints.  get_approximated_function​  def get_approximated_function() -&gt; list[tuple[float, float, float, float]]   Generates a set of constraints for each segment of the piecewise linear approximation.  Arguments:  None  Returns:  list of tuples: Each tuple contains the definition of one segment or rather linear function. The returned tuples are built like (start, end, slope, intercept).  apply_pwl_to_model​  def apply_pwl_to_model(model: Model, xvar: gp.Var, yvar: gp.Var) -&gt; tuple[Model, gp.Constr]   Applies the piecewise linear approximation to a Gurobi optimization model using the addGenConstrPWL method.  Arguments:  model gp.Model - The Gurobi model to which a piecewise linear constraint will be added.xvar gp.Var - The Gurobi model variable that represents the x-axis in the piecewise linear approximation.yvar gp.Var - The Gurobi model variable that represents the y-axis in the piecewise linear approximation.  Returns:  model gp.Model - The Gurobi model but with added piecewise linear constraint. ","version":"Next","tagName":"h2"},{"title":"Objectives of Flux Balance Analysis","type":0,"sectionRef":"#","url":"/bachelorthesis/flux-balance-analysis/objectives","content":"Objectives of Flux Balance Analysis","keywords":"","version":"Next"},{"title":"Dynamic Bounds Fitting","type":0,"sectionRef":"#","url":"/bachelorthesis/linear-approximation/methods/dynamic_bounds_fitting","content":"Dynamic Bounds Fitting","keywords":"","version":"Next"},{"title":"Why Flux Balance Analysis is Important","type":0,"sectionRef":"#","url":"/bachelorthesis/flux-balance-analysis/importance","content":"","keywords":"","version":"Next"},{"title":"Understanding Complex Metabolic Networks​","type":1,"pageTitle":"Why Flux Balance Analysis is Important","url":"/bachelorthesis/flux-balance-analysis/importance#understanding-complex-metabolic-networks","content":" Cells contain complex metabolic networks with numerous reactions and compounds. FBA helps in simplifying these networks through the steady-state assumption. This assumption posits that the production and consumption of metabolites within a cell are balanced. This balance is derived from the concept that metabolic reactions occur much faster than other cellular processes, such as gene expression, allowing for a quasi-steady-state approximation of metabolism 1. This aspect of FBA is crucial as it allows for efficient analysis of large-scale metabolic networks without requiring detailed kinetic data for each reaction.  ","version":"Next","tagName":"h2"},{"title":"Predictive Modeling​","type":1,"pageTitle":"Why Flux Balance Analysis is Important","url":"/bachelorthesis/flux-balance-analysis/importance#predictive-modeling","content":" FBA enables predictive modeling of metabolic behaviors in cells. It can accurately predict outcomes like growth rates, metabolite production rates, and the impacts of genetic changes. This feature is especially useful in fields like metabolic engineering and synthetic biology, where the goal is to design organisms that can efficiently produce specific substances.  ","version":"Next","tagName":"h2"},{"title":"Guiding Experimental Research​","type":1,"pageTitle":"Why Flux Balance Analysis is Important","url":"/bachelorthesis/flux-balance-analysis/importance#guiding-experimental-research","content":" By providing insights into metabolic pathways and potential flux bottlenecks, FBA guides experimental research, leading to more targeted and effective laboratory investigations. It helps researchers form hypotheses that can be experimentally tested.  ","version":"Next","tagName":"h2"},{"title":"Applications in Health and Industry​","type":1,"pageTitle":"Why Flux Balance Analysis is Important","url":"/bachelorthesis/flux-balance-analysis/importance#applications-in-health-and-industry","content":" In the healthcare sector, FBA aids in drug development and understanding disease mechanisms by identifying potential targets within metabolic pathways. Industrially, it is used to optimize the production of valuable biochemicals, improving efficiency and yields, and reducing costs.  ","version":"Next","tagName":"h2"},{"title":"Environmental Applications​","type":1,"pageTitle":"Why Flux Balance Analysis is Important","url":"/bachelorthesis/flux-balance-analysis/importance#environmental-applications","content":" FBA also finds applications in environmental science, such as optimizing microbial systems for waste treatment or bioremediation. By understanding the metabolic processing of pollutants by microorganisms, FBA helps in designing more effective environmental interventions.  In summary, FBA's importance lies in its ability to offer a comprehensive yet manageable approach to understanding and manipulating complex metabolic networks, with applications spanning various fields in science and industry.  Footnotes​ Reimers, A.-M., &amp; Reimers, A. C. (2016). The steady-state assumption in oscillating and growing systems. Journal of Theoretical Biology, 406, 176-186. DOI ↩ ","version":"Next","tagName":"h2"},{"title":"Static Segmentation","type":0,"sectionRef":"#","url":"/bachelorthesis/linear-approximation/methods/static_segmentation","content":"Static Segmentation","keywords":"","version":"Next"},{"title":"Introduction to Flux Balance Analysis","type":0,"sectionRef":"#","url":"/bachelorthesis/flux-balance-analysis/introduction","content":"","keywords":"","version":"Next"},{"title":"What is Flux Balance Analysis?​","type":1,"pageTitle":"Introduction to Flux Balance Analysis","url":"/bachelorthesis/flux-balance-analysis/introduction#what-is-flux-balance-analysis","content":" FBA is a method used to analyze the flow of metabolites through a metabolic network. This network consists of biochemical reactions within a cell, which are essential for it to grow and function. FBA uses mathematical models to predict how these reactions occur and to what extent, based on the limitations and needs of the cell.    A simplified example of a metabolic network, illustrating the pathways and key metabolites involved in glucose metabolism.  ","version":"Next","tagName":"h2"},{"title":"Why FBA?​","type":1,"pageTitle":"Introduction to Flux Balance Analysis","url":"/bachelorthesis/flux-balance-analysis/introduction#why-fba","content":" The primary purpose of FBA is to provide insights into cellular metabolism without the need for detailed kinetic data, which is often difficult to obtain. FBA allows researchers to predict the growth rate of an organism, the production rate of a particular metabolite, and the effects of genetic modifications. It serves as a critical tool in metabolic engineering, aiding in the design of more efficient microbial strains for industrial applications like biofuel production and pharmaceutical synthesis.  In summary, FBA offers a window into the complex world of cellular metabolism, enabling us to understand and manipulate these systems for various applications. Its development marked a significant advancement in systems biology, providing a framework to address questions that were previously out of reach.  In the following sections, we will delve deeper into the principles, mathematical framework, objectives, and applications of FBA, laying a foundation for understanding this fascinating and influential field. ","version":"Next","tagName":"h2"},{"title":"Mathematical Framework of FBA","type":0,"sectionRef":"#","url":"/bachelorthesis/flux-balance-analysis/framework","content":"","keywords":"","version":"Next"},{"title":"Building the FBA Model: Basics of the Stoichiometric Matrix​","type":1,"pageTitle":"Mathematical Framework of FBA","url":"/bachelorthesis/flux-balance-analysis/framework#building-the-fba-model-basics-of-the-stoichiometric-matrix","content":" As already hinted in the principles of FBA, one model typically consists of a large number of stoichiometric equations. Those equations can be derived from a metabolic network. We will now construct the mathematical construct ourselves with this tiny model as an example:    If we follow along this tiny metabolic network, we see that one Glucose is produced by R1R1R1 and is consumed by R2R2R2 and R3R3R3, therefore we would get:R1−R2−R3=0R1 - R2 - R3 = 0R1−R2−R3=0.  info Note, that R1−R2−R3=0R1 - R2 - R3 = 0R1−R2−R3=0 is equal to 1∗R1−1∗R2−1∗R3=01*R1 - 1*R2 - 1*R3 = 01∗R1−1∗R2−1∗R3=0.  Now, if we write the other reactions out of the model we get a set of equations like this:  R1−R2−R3=0(Glucose)R2=0(CO2)R2−R4=0(ATP)R3−R5=0(Precursor)(R4+R5)−R6=0(Biomass)\\begin{align*} R1 - R2 - R3 &amp;= 0 \\quad &amp;\\text{(Glucose)} \\\\ R2 &amp;= 0 \\quad &amp;\\text{(CO2)} \\\\ R2 - R4 &amp;= 0 \\quad &amp;\\text{(ATP)} \\\\ R3 - R5 &amp;= 0 \\quad &amp;\\text{(Precursor)} \\\\ (R4 + R5) - R6 &amp;= 0 \\quad &amp;\\text{(Biomass)} \\end{align*}R1−R2−R3R2R2−R4R3−R5(R4+R5)−R6​=0=0=0=0=0​(Glucose)(CO2)(ATP)(Precursor)(Biomass)​  With those equations, we can build the core component of every FBA model: The stoichiometric matrix SSS. It is defined as a two-dimensional matrix where rows represent different metabolites and columns represent reactions:  S=[s11s12⋯s1ns21s22⋯s2n⋮⋮⋱⋮sm1sm2⋯smn]S = \\begin{bmatrix} s_{11} &amp; s_{12} &amp; \\cdots &amp; s_{1n} \\\\ s_{21} &amp; s_{22} &amp; \\cdots &amp; s_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ s_{m1} &amp; s_{m2} &amp; \\cdots &amp; s_{mn} \\end{bmatrix}S=​s11​s21​⋮sm1​​s12​s22​⋮sm2​​⋯⋯⋱⋯​s1n​s2n​⋮smn​​​  Each element, sijs_{ij}sij​, indicates the involvement of metabolite iii in reaction jjj.  For our simple metabolic model the stoichiometric matrix can be represented as:  R1R2R3R4R5R6Glucose1−1−1000CO2010000ATP010−100Precursor0010−10Biomass00011−1\\begin{array}{c|cccccc} &amp; \\text{R1} &amp; \\text{R2} &amp; \\text{R3} &amp; \\text{R4} &amp; \\text{R5} &amp; \\text{R6} \\\\ \\hline \\text{Glucose} &amp; 1 &amp; -1 &amp; -1 &amp; 0 &amp; 0 &amp; 0 \\\\ \\text{CO2} &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ \\text{ATP} &amp; 0 &amp; 1 &amp; 0 &amp; -1 &amp; 0 &amp; 0 \\\\ \\text{Precursor} &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 &amp; 0 \\\\ \\text{Biomass} &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; -1 \\\\ \\end{array}GlucoseCO2ATPPrecursorBiomass​R110000​R2−11100​R3−10010​R400−101​R5000−11​R60000−1​​  Negative values indicate the consumption of a metabolite in a reaction.Positive values indicate the production of a metabolite.The value itself indicates the count of the metabolite (e.g. one Glucose to two Precursor)  ","version":"Next","tagName":"h2"},{"title":"Introduction to Linear Programming in FBA​","type":1,"pageTitle":"Mathematical Framework of FBA","url":"/bachelorthesis/flux-balance-analysis/framework#introduction-to-linear-programming-in-fba","content":" Flux Balance Analysis (FBA) employs linear programming, a mathematical method for finding the maximum or minimum value of a linear function, to determine the flow of metabolites through a metabolic network. This optimization is crucial for predicting the most efficient pathways that a cell might use under certain conditions.  The objective function in FBA, which we seek to optimize, typically represents a biological goal such as maximizing growth rate or metabolite production. It is formulated as follows:  Maximize Z=cT⋅v\\text{Maximize} \\: Z = c^T \\cdot vMaximizeZ=cT⋅v  Here, ccc is a vector containing coefficients that define the contribution of each reaction to the objective function, and vvv represents the flux vector, containing the rates of each reaction within the metabolic network.  For example, if the goal is to maximize the production of Biomass, the objective function may look like this:  Maximize Z=[000001]⋅[v1v2v3v4v5v6]\\text{Maximize} \\: Z = [0 \\quad 0 \\quad 0 \\quad 0 \\quad 0 \\quad 1] \\cdot \\begin{bmatrix} v_1 \\\\ v_2 \\\\ v_3 \\\\ v_4 \\\\ v_5 \\\\ v_6 \\\\ \\end{bmatrix}MaximizeZ=[000001]⋅​v1​v2​v3​v4​v5​v6​​​  In this case, v6v_6v6​ represents the flux through the reaction producing Biomass (R6R6R6), and the coefficient corresponding to v6v_6v6​ in the vector ccc is 1, emphasizing its importance in the optimization process. This specific example would mean that only reaction R6R6R6 is contributing to the objective function with the flux provided in the flux vector. As it is the only reaction contributing to the objective function the optimal solution or the maximum would be the upper limit of the flux of v6v_6v6​.  ","version":"Next","tagName":"h2"},{"title":"Key Constraints: Mass Balance and Capacity​","type":1,"pageTitle":"Mathematical Framework of FBA","url":"/bachelorthesis/flux-balance-analysis/framework#key-constraints-mass-balance-and-capacity","content":" Mass Balance Constraint: Ensures that for each metabolite, the rate of its production equals the rate of its consumption. S⋅v=0S \\cdot v = 0S⋅v=0 Capacity Constraints: These include limits on the flux of reactions, ensuring realistic biological conditions. vmin≤v≤vmaxv_{\\text{min}} \\leq v \\leq v_{\\text{max}}vmin​≤v≤vmax​  Understanding these mathematical principles is vital for effectively utilizing FBA in metabolic network analysis and optimization. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}